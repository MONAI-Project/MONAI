# Lazy Evaluation

The lazy_evaluation flag on Compose has three potential states, but only two potential code-paths:
 . True -> True
 . False -> False
 . None -> False

In terms of the code paths:
 . False disables all lazy resampling
 . True enables all lazy resampling (which involves overriding what the user has set

Design-wise, it has always made sense to me that the user should be able to set flags on transforms.
Doing so allows a given transform to run in a non-lazy fashion of the user desires without having to
use some other mechanism to force non-lazy reevaluation.

As such, the intention with the design has always been that, everything else being equal, lazy
resampling will honor what is set on the transforms, rather than automatically overriding them.

There are two ways I see this working:
 . Compose has a lazy_evaluation mode that tells it to do what the transforms want to do
 . Transforms have a lazy_evaluation mode that means I'll do whatever compose says


## The compose way

Compose has three lazy_evaluation states: 'OFF', 'ENABLED', 'ON'

OFF means "no lazy_evalution is allowed, even if a transform has lazy_evaluation set to True"
ENABLED means "if a lazy transform has lazy_evaluation set to True, evaluate it lazily
ON means "override any lazy transforms so that lazy evaluation happens

Implication: compose can always overrule a transform setting and evaluate it lazily


## The transform way

Transforms that can evalate lazily have three states: False, None, True

False means "I must not be lazily evaluated"
None means "I'm happy to be evaluated lazily or not depending on the compose"
True means "I must be lazily evaluated"

Implication: transforms can always overrule compose


## Hybrid

Both systems exist, with compose getting the final say if 'ON' set.


## Selecting the best design

I think the compose way is the best way to implement this. It makes sense that the user can set the policy
primarily through compose. The user doesn't want to touch the setting on the individual transforms, they
are free not to, and 'ENABLE' & 'ON' will do the same thing. If the user sets flags on the transforms,
'ENABLE' allows for fine-grained settings, and 'ON' will override the transform.

I don't think it is necessarily good to allow transforms to overrule compose. It should be easy for the
user to completely switch lazy resampling on or off, they can do so in a single place in the code if compose
can overrule transforms.

The hybrid system may give more fine grained semantics, i.e. "transform trumps compose trumps transform" but
this is quite a cognitive load for the user, too much IMO.


